---
export interface Props {
  message?: string;
  showDetails?: boolean;
  type?: 'warning' | 'info' | 'error';
}

const { 
  message = 'Usando datos de demostraci칩n', 
  showDetails = false,
  type = 'info'
} = Astro.props;

const typeClasses = {
  warning: 'bg-yellow-500/10 border-yellow-500/20 text-yellow-700',
  info: 'bg-blue-500/10 border-blue-500/20 text-blue-700',
  error: 'bg-red-500/10 border-red-500/20 text-red-700'
};

const iconSvg = {
  warning: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />`,
  info: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />`,
  error: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />`
};
---

<!-- Indicador de estado de API (solo visible en desarrollo) -->
{import.meta.env.DEV && (
  <div class={`fixed top-4 right-4 z-50 p-3 rounded-lg border backdrop-blur-sm ${typeClasses[type]} max-w-sm`}>
    <div class="flex items-start gap-2">
      <svg class="w-5 h-5 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <Fragment set:html={iconSvg[type]} />
      </svg>
      <div class="text-sm">
        <p class="font-medium">{message}</p>
        {showDetails && (
          <p class="text-xs mt-1 opacity-75">
            En producci칩n, este sitio usar치 datos pre-renderizados para m치ximo rendimiento.
          </p>
        )}
      </div>
    </div>
  </div>
)}

<style>
  /* Solo mostrar en modo desarrollo */
  @media (prefers-reduced-motion: reduce) {
    .api-status {
      animation: none;
    }
  }
</style>
